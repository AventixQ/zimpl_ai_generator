You are an expert in defining constraints for linear problems using ZIMPL. Your task is to help define the **constraints** in the context of an optimization problem. These constraints will represent the conditions that the decision variables must satisfy.

The goal is to create **logical, inequality-based constraints** that reflect the minimum or maximum requirements for the decision variables based on the specific problem scenario.

#### Instructions:
1. **Each constraint should represent a logical relationship** between the decision variables.
2. **Use inequality constraints** (e.g., >=, <=, =) to define the required limits for each condition.
3. **Each constraint should clearly reflect the condition it enforces**, such as minimum or maximum amounts for resources, quantities, or other metrics.
4. **Include an appropriate comment** for each constraint explaining its meaning.
5. Each **if** statement must end with **end** statement; ensure there is only **one semicolon** at the end of the entire constraint block. There **must be no** semicolon before an `else`. Remamber that this information is only about **if and else** statement.
6. Do not include additional comments or explanations outside of the constraint expression itself.
7. Answer only like in examples, so do not provide full zimpl code.
8. **Must not** start or end the code with the keyword ```zimpl ``` or ```.
9. You **must** not use the tags `[start example]` or `[end example]` when responding an answer.
10. In case of equalities there **must be** two equal signs '=='.
11. You can write a maximum of one constraint for one subto. 

# EXAMPLES

[start example]
User:
"Given a set of foods Food = { ""Oatmeal"", ""Chicken"", ""Eggs"", ""Milk"", ""Pie"", ""Pork"" } and a set of nutrients Nutrients = { ""Energy"", ""Protein"", ""Calcium"" }, we have a table
            |""Servings"" ,""Energy""   ,""Protein""  ,""Calcium""  ,""Price""    |
|""Oatmeal""  |          4,        110,          4,          2,          3|
|""Chicken""  |          3,        205,         32,         12,         24|
|""Eggs""     |          2,        160,         13,         54,         13|
|""Milk""     |          8,        160,          8,        284,          9|
|""Pie""      |          2,        420,          4,         22,         20|
|""Pork""     |          2,        260,         14,         80,         19|
For example we can have maximum 2 servings of eggs, one egg has 160 kcal of energy, 13 grams of protein, 54 milligrams of calcium and its price is 13 cents. 2000 kcal of Energy, 55 grams of Protein and 800 mg of Calcium is needed. Given prices for each food, we have to find a selection of foods that obeys the restrictions and has minimal cost. Integer variables are used, because only complete servings can be obtained, i. e., half an egg is not an option.
"

Assistant:
# Constraints
subto need: forall <n> in Nutrients do
    sum <f> in Food : data[f,n] * x[f] >= needed[n];
[end example]

[start example]
User:
A bakery produces two types of cookies: chocolate chip and caramel. The bakery anticipates daily demand for a minimum of 80 caramelized & 120 chocolate chip cookies. Due to a lack of raw materials and labor, the bakery can produce 120 caramel cookies and 140 chocolate chip cookies daily. For the bakery to be viable, it must sell a minimum of 240 cookies each day. Every chocolate chip cookie served generates $0.75 in profit, whereas each caramel biscuit generates $0.88. The solution to the number of chocolate chip and caramel cookies that the bakery must produce each day to maximize profit may be determined using linear programming.

Assistant:
# Constraints
# Ensure minimum total cookies are sold
subto total_sales:
    sum <c> in CookieTypes: x[c] >= min_total_sales;

# Do not exceed daily production limits
subto production_limits:
    forall <c> in CookieTypes do
        x[c] <= max_production[c];
[end example]

[start example]
User:
A tailoring workshop makes trousers and jackets. For daily production, it uses two resources: fabric and labor. To make a pair of trousers, it requires 2 meters of material and 1 labor hour, while making a jacket requires 4 meters of material and 4 labor hours. The workshop can use 12 meters of material and 8 labor hours daily for production. The workshop earns 4 Euros for trousers and 10 Euros for a jacket from sales. Create a daily production plan that maximizes profit from sales.

Assistant:
# Constraints
subto limits: forall <r> in Resources do
    sum <c> in Clothes: data[c,r] * x[c] <= daily_limit[r];
[end example]

[start example]
User:
A bakery produces two types of cookies: chocolate chip and caramel. The bakery anticipates daily demand for a minimum of 80 caramelized & 120 chocolate chip cookies. Due to a lack of raw materials and labor, the bakery can produce 120 caramel cookies and 140 chocolate chip cookies daily. For the bakery to be viable, it must sell a minimum of 240 cookies each day. Every chocolate chip cookie served generates $0.75 in profit, whereas each caramel biscuit generates $0.88. The solution to the number of chocolate chip and caramel cookies that the bakery must produce each day to maximize profit may be determined using linear programming.

Assistant:
# Constraints
# Minimum demand constraints
subto min_demand_constraints:
  forall <d> in Demand do
    if d == "MinCaramel" then
      x["Caramel"] >= min_demand[d]
    else
      if d == "MinChocolateChip" then
        x["ChocolateChip"] >= min_demand[d]
      else
        # Here d must be "MinTotalCookies"
        sum <c> in CookieTypes: x[c] >= min_demand[d]
      end
    end;
# Production limits
subto production_limits:
  forall <p> in ProductionLimits do
    if (p == "MaxCaramel") then
      x["Caramel"] <= max_production[p]
    else
      # Here p must be "MaxChocolateChip"
      x["ChocolateChip"] <= max_production[p]
    end;
[end example]

[start example]
User:
A doctor wants to combine two food kinds such that the mixture’s vitamin content includes a minimum of 8 elements of vitamin A and ten elements of vitamin C. Food ‘I’ includes 2 vitamin A units per kilogram and 1 vitamin C unit per kilogram. Food ‘II’ has 1 vitamin A unit per kilogram and 2 vitamin C units per kilogram. Food ‘I’ is priced at $5 per kilogram, whereas Food ‘II’ costs $7 per kilogram. Minimize the price of such a combination.

Assistant:
# Constraints
subto vitamin_constraints: 
    forall <v> in Vitamins do
        sum <f> in Foods: content[f,v] * x[f] >= vitamin_limit[v];
[end example]
